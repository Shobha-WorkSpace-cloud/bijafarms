{"version":3,"file":"node-build.mjs","sources":["../../server/routes/demo.ts","../../server/routes/expenses.ts","../../server/routes/sms-reminders.ts","../../server/routes/tasks.ts","../../server/routes/test-reminder.ts","../../server/routes/animals.ts","../../server/index.ts","../../server/node-build.ts"],"sourcesContent":["import { RequestHandler } from \"express\";\r\nimport { DemoResponse } from \"@shared/api\";\r\n\r\nexport const handleDemo: RequestHandler = (req, res) => {\r\n  const response: DemoResponse = {\r\n    message: \"Hello from Express server\",\r\n  };\r\n  res.status(200).json(response);\r\n};\r\n","import { RequestHandler } from \"express\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport { ExpenseRecord, CategoryManagementData } from \"@shared/expense-types\";\r\n\r\nconst EXPENSES_FILE = path.join(__dirname, \"../data/expenses.json\");\r\nconst CATEGORIES_FILE = path.join(__dirname, \"../data/categories.json\");\r\n\r\n// Ensure data directory exists\r\nconst dataDir = path.dirname(EXPENSES_FILE);\r\nif (!fs.existsSync(dataDir)) {\r\n  fs.mkdirSync(dataDir, { recursive: true });\r\n}\r\n\r\n// Helper function to read expenses from JSON file\r\nconst readExpenses = (): ExpenseRecord[] => {\r\n  try {\r\n    if (!fs.existsSync(EXPENSES_FILE)) {\r\n      return [];\r\n    }\r\n    const data = fs.readFileSync(EXPENSES_FILE, \"utf8\");\r\n    const rawData = JSON.parse(data);\r\n\r\n    // Transform the data to match the expected format and ensure unique IDs\r\n    return rawData.map((item: any, index: number) => {\r\n      // Handle date format - check if already in YYYY-MM-DD format or needs conversion from M/D/YYYY\r\n      let formattedDate = new Date().toISOString().split(\"T\")[0];\r\n      const dateStr = item.Date || item.date;\r\n      if (dateStr) {\r\n        try {\r\n          // Check if already in YYYY-MM-DD format\r\n          if (/^\\d{4}-\\d{2}-\\d{2}$/.test(dateStr)) {\r\n            formattedDate = dateStr;\r\n          } else {\r\n            // Try to parse M/D/YYYY format\r\n            const dateParts = dateStr.split(\"/\");\r\n            if (dateParts.length === 3) {\r\n              const [month, day, year] = dateParts;\r\n\r\n              // Ensure proper padding for month and day\r\n              const paddedMonth = month.padStart(2, \"0\");\r\n              const paddedDay = day.padStart(2, \"0\");\r\n\r\n              formattedDate = `${year}-${paddedMonth}-${paddedDay}`;\r\n            }\r\n          }\r\n        } catch (e) {\r\n          console.warn(`Invalid date format: ${dateStr}`);\r\n        }\r\n      }\r\n\r\n      return {\r\n        id: String(item.id || index + 1),\r\n        date: formattedDate,\r\n        type: item.Type || item.type || \"Expense\",\r\n        description: item.Description || item.description || \"No description\",\r\n        amount: parseFloat(item.Amount || item.amount || 0),\r\n        paidBy: item[\"Paid By\"] || item.paidBy || \"Unknown\",\r\n        category: item.Category || item.category || \"Other\",\r\n        subCategory: item[\"Sub-Category\"] || item.subCategory || \"General\",\r\n        source: item.Source || item.source || \"Unknown\",\r\n        notes: item.Notes || item.notes || \"\",\r\n      };\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error reading expenses:\", error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Helper function to write expenses to JSON file\r\nconst writeExpenses = (expenses: ExpenseRecord[]): void => {\r\n  try {\r\n    fs.writeFileSync(EXPENSES_FILE, JSON.stringify(expenses, null, 2));\r\n  } catch (error) {\r\n    console.error(\"Error writing expenses:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Helper function to read categories from JSON file\r\nconst readCategories = (): CategoryManagementData => {\r\n  try {\r\n    if (!fs.existsSync(CATEGORIES_FILE)) {\r\n      return { categories: [], lastUpdated: new Date().toISOString() };\r\n    }\r\n    const data = fs.readFileSync(CATEGORIES_FILE, \"utf8\");\r\n    return JSON.parse(data);\r\n  } catch (error) {\r\n    console.error(\"Error reading categories:\", error);\r\n    return { categories: [], lastUpdated: new Date().toISOString() };\r\n  }\r\n};\r\n\r\n// Helper function to write categories to JSON file\r\nconst writeCategories = (data: CategoryManagementData): void => {\r\n  try {\r\n    fs.writeFileSync(CATEGORIES_FILE, JSON.stringify(data, null, 2));\r\n  } catch (error) {\r\n    console.error(\"Error writing categories:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// GET /api/expenses - Get all expenses\r\nexport const getExpenses: RequestHandler = (req, res) => {\r\n  try {\r\n    const expenses = readExpenses();\r\n    res.json(expenses);\r\n  } catch (error) {\r\n    console.error(\"Error getting expenses:\", error);\r\n    res.status(500).json({ error: \"Failed to fetch expenses\" });\r\n  }\r\n};\r\n\r\n// POST /api/expenses - Add new expense\r\nexport const addExpense: RequestHandler = (req, res) => {\r\n  try {\r\n    const newExpense: ExpenseRecord = req.body;\r\n\r\n    // Validate required fields\r\n    if (!newExpense.description || !newExpense.amount || !newExpense.category) {\r\n      return res.status(400).json({ error: \"Missing required fields\" });\r\n    }\r\n\r\n    // Generate auto-increment integer ID\r\n    const expenses = readExpenses();\r\n    let maxId = 0;\r\n\r\n    // Find the highest existing ID\r\n    expenses.forEach((expense) => {\r\n      const numId = parseInt(expense.id);\r\n      if (!isNaN(numId) && numId > maxId) {\r\n        maxId = numId;\r\n      }\r\n    });\r\n\r\n    // Set new ID as next integer\r\n    newExpense.id = (maxId + 1).toString();\r\n    expenses.unshift(newExpense); // Add to beginning of array\r\n    writeExpenses(expenses);\r\n\r\n    res.status(201).json(newExpense);\r\n  } catch (error) {\r\n    console.error(\"Error adding expense:\", error);\r\n    res.status(500).json({ error: \"Failed to add expense\" });\r\n  }\r\n};\r\n\r\n// PUT /api/expenses/:id - Update existing expense\r\nexport const updateExpense: RequestHandler = (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const updatedExpense: ExpenseRecord = req.body;\r\n\r\n    const expenses = readExpenses();\r\n    const index = expenses.findIndex((expense) => expense.id === id);\r\n\r\n    if (index === -1) {\r\n      return res.status(404).json({ error: \"Expense not found\" });\r\n    }\r\n\r\n    expenses[index] = { ...expenses[index], ...updatedExpense, id };\r\n    writeExpenses(expenses);\r\n\r\n    res.json(expenses[index]);\r\n  } catch (error) {\r\n    console.error(\"Error updating expense:\", error);\r\n    res.status(500).json({ error: \"Failed to update expense\" });\r\n  }\r\n};\r\n\r\n// DELETE /api/expenses/:id - Delete expense\r\nexport const deleteExpense: RequestHandler = (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n\r\n    const expenses = readExpenses();\r\n    const index = expenses.findIndex((expense) => expense.id === id);\r\n\r\n    if (index === -1) {\r\n      return res.status(404).json({ error: \"Expense not found\" });\r\n    }\r\n\r\n    expenses.splice(index, 1);\r\n    writeExpenses(expenses);\r\n\r\n    res.json({ message: \"Expense deleted successfully\" });\r\n  } catch (error) {\r\n    console.error(\"Error deleting expense:\", error);\r\n    res.status(500).json({ error: \"Failed to delete expense\" });\r\n  }\r\n};\r\n\r\n// POST /api/expenses/import - Import multiple expenses\r\nexport const importExpenses: RequestHandler = (req, res) => {\r\n  try {\r\n    const importedExpenses: ExpenseRecord[] = req.body;\r\n\r\n    if (!Array.isArray(importedExpenses)) {\r\n      return res.status(400).json({ error: \"Expected array of expenses\" });\r\n    }\r\n\r\n    const expenses = readExpenses();\r\n\r\n    // Add imported expenses to the beginning\r\n    const updatedExpenses = [...importedExpenses, ...expenses];\r\n    writeExpenses(updatedExpenses);\r\n\r\n    res.json({\r\n      message: \"Expenses imported successfully\",\r\n      count: importedExpenses.length,\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error importing expenses:\", error);\r\n    res.status(500).json({ error: \"Failed to import expenses\" });\r\n  }\r\n};\r\n\r\n// POST /api/expenses/bulk-delete - Delete multiple expenses\r\nexport const bulkDeleteExpenses: RequestHandler = (req, res) => {\r\n  try {\r\n    const { ids }: { ids: string[] } = req.body;\r\n\r\n    if (!Array.isArray(ids)) {\r\n      return res.status(400).json({ error: \"Expected array of IDs\" });\r\n    }\r\n\r\n    const expenses = readExpenses();\r\n    const filteredExpenses = expenses.filter(\r\n      (expense) => !ids.includes(expense.id),\r\n    );\r\n    writeExpenses(filteredExpenses);\r\n\r\n    res.json({\r\n      message: \"Expenses deleted successfully\",\r\n      deletedCount: expenses.length - filteredExpenses.length,\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error bulk deleting expenses:\", error);\r\n    res.status(500).json({ error: \"Failed to delete expenses\" });\r\n  }\r\n};\r\n\r\n// GET /api/expenses/backup - Create backup of expenses\r\nexport const backupExpenses: RequestHandler = (req, res) => {\r\n  try {\r\n    const expenses = readExpenses();\r\n    const timestamp = new Date().toISOString().replace(/[:.]/g, \"-\");\r\n    const backupFileName = `expenses-backup-${timestamp}.json`;\r\n\r\n    res.setHeader(\"Content-Type\", \"application/json\");\r\n    res.setHeader(\r\n      \"Content-Disposition\",\r\n      `attachment; filename=\"${backupFileName}\"`,\r\n    );\r\n    res.json(expenses);\r\n  } catch (error) {\r\n    console.error(\"Error creating backup:\", error);\r\n    res.status(500).json({ error: \"Failed to create backup\" });\r\n  }\r\n};\r\n\r\n// GET /api/expenses/categories - Get categories\r\nexport const getCategories: RequestHandler = (req, res) => {\r\n  try {\r\n    const categories = readCategories();\r\n    res.json(categories);\r\n  } catch (error) {\r\n    console.error(\"Error getting categories:\", error);\r\n    res.status(500).json({ error: \"Failed to fetch categories\" });\r\n  }\r\n};\r\n\r\n// POST /api/expenses/categories - Save categories\r\nexport const saveCategories: RequestHandler = (req, res) => {\r\n  try {\r\n    const categoryData: CategoryManagementData = req.body;\r\n\r\n    // Validate required fields\r\n    if (!categoryData.categories || !Array.isArray(categoryData.categories)) {\r\n      return res.status(400).json({ error: \"Invalid categories data\" });\r\n    }\r\n\r\n    writeCategories(categoryData);\r\n    res.json({ message: \"Categories saved successfully\" });\r\n  } catch (error) {\r\n    console.error(\"Error saving categories:\", error);\r\n    res.status(500).json({ error: \"Failed to save categories\" });\r\n  }\r\n};\r\n\r\n// POST /api/expenses/populate-categories - Populate categories from existing expense data\r\nexport const populateCategories: RequestHandler = (req, res) => {\r\n  try {\r\n    const expenses = readExpenses();\r\n    const categoryMap: { [key: string]: Set<string> } = {};\r\n\r\n    // Extract categories and sub-categories from existing expenses\r\n    expenses.forEach((expense) => {\r\n      if (expense.category && expense.category.trim() !== \"\") {\r\n        const category = expense.category.trim();\r\n        const subCategory = expense.subCategory\r\n          ? expense.subCategory.trim()\r\n          : \"General\";\r\n\r\n        if (!categoryMap[category]) {\r\n          categoryMap[category] = new Set();\r\n        }\r\n\r\n        if (subCategory && subCategory !== \"\") {\r\n          categoryMap[category].add(subCategory);\r\n        }\r\n      }\r\n    });\r\n\r\n    // Convert to CategoryConfig format\r\n    const categories: CategoryConfig[] = Object.entries(categoryMap).map(\r\n      ([categoryName, subCategoriesSet], index) => {\r\n        // Clean up and deduplicate sub-categories\r\n        const subCategories = Array.from(subCategoriesSet)\r\n          .filter((sub) => sub && sub.trim() !== \"\")\r\n          .map((sub) => {\r\n            // Standardize common variations\r\n            if (sub.toLowerCase() === \"misc\") return \"Misc\";\r\n            if (sub.toLowerCase() === \"plubming\") return \"Plumbing\";\r\n            if (sub.toLowerCase() === \"solar\") return \"Solar\";\r\n            if (sub.toLowerCase() === \"doors\") return \"Doors\";\r\n            if (sub.toLowerCase() === \"electric\") return \"Electric\";\r\n            return sub;\r\n          })\r\n          .filter(\r\n            (sub, idx, arr) =>\r\n              arr.findIndex((s) => s.toLowerCase() === sub.toLowerCase()) ===\r\n              idx,\r\n          ) // Remove duplicates\r\n          .sort(); // Sort alphabetically\r\n\r\n        return {\r\n          id: (Date.now() + index).toString(),\r\n          name: categoryName,\r\n          subCategories: subCategories.length > 0 ? subCategories : [\"General\"],\r\n          createdAt: new Date().toISOString(),\r\n        };\r\n      },\r\n    );\r\n\r\n    // Sort categories alphabetically\r\n    categories.sort((a, b) => a.name.localeCompare(b.name));\r\n\r\n    const categoryData: CategoryManagementData = {\r\n      categories,\r\n      lastUpdated: new Date().toISOString(),\r\n    };\r\n\r\n    writeCategories(categoryData);\r\n\r\n    res.json({\r\n      message: \"Categories populated successfully\",\r\n      count: categories.length,\r\n      categories: categoryData,\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error populating categories:\", error);\r\n    res.status(500).json({ error: \"Failed to populate categories\" });\r\n  }\r\n};\r\n","import { RequestHandler } from \"express\";\r\n\r\ninterface WhatsAppReminderRequest {\r\n  phone: string;\r\n  message: string;\r\n  taskTitle: string;\r\n  dueDate: string;\r\n}\r\n\r\ninterface WhatsAppResponse {\r\n  success: boolean;\r\n  message: string;\r\n  whatsappUrl?: string;\r\n  data?: any;\r\n}\r\n\r\n// WhatsApp Web URL generator for farm task reminders\r\nconst generateWhatsAppURL = (phone: string, message: string): string => {\r\n  // Format phone number - ensure it starts with 91 for India (without +)\r\n  const formattedPhone = phone.startsWith(\"+91\")\r\n    ? phone.substring(1) // Remove + but keep 91\r\n    : phone.startsWith(\"91\")\r\n      ? phone // Keep as is\r\n      : phone.startsWith(\"0\")\r\n        ? \"91\" + phone.substring(1) // Replace 0 with 91\r\n        : \"91\" + phone; // Add 91 prefix\r\n\r\n  // Encode the message for URL\r\n  const encodedMessage = encodeURIComponent(message);\r\n\r\n  // Generate WhatsApp Web URL\r\n  const whatsappUrl = `https://wa.me/${formattedPhone}?text=${encodedMessage}`;\r\n\r\n  console.log(`Generated WhatsApp URL for: ${formattedPhone}`);\r\n  console.log(`Message: ${message}`);\r\n\r\n  return whatsappUrl;\r\n};\r\n\r\n// Send WhatsApp reminder (generates URL for manual sending)\r\nconst sendWhatsAppReminder = async (\r\n  phone: string,\r\n  message: string,\r\n): Promise<WhatsAppResponse> => {\r\n  try {\r\n    const whatsappUrl = generateWhatsAppURL(phone, message);\r\n\r\n    return {\r\n      success: true,\r\n      message: \"WhatsApp URL generated successfully\",\r\n      whatsappUrl: whatsappUrl,\r\n      data: {\r\n        phone: phone,\r\n        formattedPhone: phone.startsWith(\"+91\") ? phone.substring(1) : phone,\r\n        message: message,\r\n      },\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error generating WhatsApp URL:\", error);\r\n    return {\r\n      success: false,\r\n      message: \"Failed to generate WhatsApp URL\",\r\n      data: error instanceof Error ? error.message : \"Unknown error\",\r\n    };\r\n  }\r\n};\r\n\r\nexport const sendWhatsAppReminderEndpoint: RequestHandler = async (\r\n  req,\r\n  res,\r\n) => {\r\n  try {\r\n    const { phone, message, taskTitle, dueDate }: WhatsAppReminderRequest =\r\n      req.body;\r\n\r\n    console.log(\r\n      `WhatsApp Reminder - Phone: ${phone}, Task: ${taskTitle}, Due: ${dueDate}`,\r\n    );\r\n\r\n    // Generate WhatsApp URL\r\n    const whatsappResponse = await sendWhatsAppReminder(phone, message);\r\n\r\n    if (whatsappResponse.success) {\r\n      res.json({\r\n        success: true,\r\n        message: \"WhatsApp reminder URL generated successfully\",\r\n        phone: phone,\r\n        taskTitle: taskTitle,\r\n        generatedAt: new Date().toISOString(),\r\n        provider: \"WhatsApp\",\r\n        whatsappUrl: whatsappResponse.whatsappUrl,\r\n        providerResponse: whatsappResponse,\r\n      });\r\n    } else {\r\n      console.error(\"WhatsApp error:\", whatsappResponse);\r\n      res.status(400).json({\r\n        success: false,\r\n        error: \"Failed to generate WhatsApp URL\",\r\n        details: whatsappResponse.message || \"Unknown error\",\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error generating WhatsApp reminder:\", error);\r\n    res.status(500).json({\r\n      success: false,\r\n      error: \"Failed to generate WhatsApp reminder\",\r\n      details: error instanceof Error ? error.message : \"Unknown error\",\r\n    });\r\n  }\r\n};\r\n\r\n// Test SMS endpoint to validate SMSIndiaHub integration\r\n// Simple test WhatsApp endpoint\r\nexport const sendTestWhatsAppSimple: RequestHandler = async (req, res) => {\r\n  console.log(\"=== Simple Test WhatsApp Request ===\");\r\n\r\n  res.setHeader(\"Content-Type\", \"application/json\");\r\n\r\n  try {\r\n    const testMessage = `🧪 TEST: Bija Farms WhatsApp working! ${new Date().toLocaleTimeString()}`;\r\n    console.log(\"Test message:\", testMessage);\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      message: \"Test WhatsApp endpoint working\",\r\n      phone: \"+919985442209\",\r\n      testMessage: testMessage,\r\n      generatedAt: new Date().toISOString(),\r\n      provider: \"WhatsApp\",\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Simple test error:\", error);\r\n    res.status(500).json({\r\n      success: false,\r\n      error: \"Test failed\",\r\n      details: String(error),\r\n    });\r\n  }\r\n};\r\n\r\nexport const sendTestWhatsApp: RequestHandler = async (req, res) => {\r\n  try {\r\n    console.log(\"=== Test WhatsApp Request Started ===\");\r\n\r\n    const testMessage = `🧪 TEST MESSAGE from Bija Farms: WhatsApp integration is working! Sent at ${new Date().toLocaleString(\"en-IN\", { timeZone: \"Asia/Kolkata\" })}`;\r\n\r\n    console.log(\"Generating test WhatsApp URL for +919985442209...\");\r\n    console.log(\"Test message:\", testMessage);\r\n\r\n    const whatsappResponse = await sendWhatsAppReminder(\r\n      \"+919985442209\",\r\n      testMessage,\r\n    );\r\n    console.log(\"WhatsApp Response received:\", whatsappResponse);\r\n\r\n    if (whatsappResponse.success) {\r\n      console.log(\"✅ Test WhatsApp URL generated successfully\");\r\n      res.json({\r\n        success: true,\r\n        message: \"Test WhatsApp URL generated successfully\",\r\n        phone: \"+919985442209\",\r\n        testMessage: testMessage,\r\n        generatedAt: new Date().toISOString(),\r\n        provider: \"WhatsApp\",\r\n        whatsappUrl: whatsappResponse.whatsappUrl,\r\n        providerResponse: whatsappResponse,\r\n      });\r\n    } else {\r\n      console.error(\"❌ WhatsApp test error:\", whatsappResponse);\r\n      res.status(400).json({\r\n        success: false,\r\n        error: \"Failed to generate test WhatsApp URL\",\r\n        details: whatsappResponse.message || \"Unknown error\",\r\n        providerResponse: whatsappResponse,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.error(\"❌ Error generating test WhatsApp:\", error);\r\n    res.status(500).json({\r\n      success: false,\r\n      error: \"Failed to generate test WhatsApp\",\r\n      details: error instanceof Error ? error.message : \"Unknown error\",\r\n    });\r\n  }\r\n};\r\n\r\nexport const scheduleReminder: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { taskId, title, dueDate, description } = req.body;\r\n\r\n    // Calculate reminder date (1 day before due date)\r\n    const dueDateObj = new Date(dueDate);\r\n    const reminderDate = new Date(dueDateObj);\r\n    reminderDate.setDate(reminderDate.getDate() - 1);\r\n\r\n    const now = new Date();\r\n    const timeUntilReminder = reminderDate.getTime() - now.getTime();\r\n\r\n    // If reminder date is in the past or today, generate immediate WhatsApp URL\r\n    if (timeUntilReminder <= 0) {\r\n      const message = `🚨 URGENT: Farm task \"${title}\" is due ${dueDate === now.toISOString().split(\"T\")[0] ? \"TODAY\" : \"OVERDUE\"}! Please complete: ${description}`;\r\n\r\n      try {\r\n        const whatsappResponse = await sendWhatsAppReminder(\r\n          \"+919985442209\",\r\n          message,\r\n        );\r\n\r\n        return res.json({\r\n          success: true,\r\n          message:\r\n            \"Immediate reminder WhatsApp URL generated (task is due soon)\",\r\n          scheduledFor: \"immediate\",\r\n          provider: \"WhatsApp\",\r\n          whatsappUrl: whatsappResponse.whatsappUrl,\r\n          whatsappStatus: whatsappResponse.success ? \"generated\" : \"failed\",\r\n        });\r\n      } catch (error) {\r\n        console.error(\"Failed to generate immediate WhatsApp URL:\", error);\r\n        return res.status(500).json({\r\n          success: false,\r\n          error: \"Failed to generate immediate WhatsApp reminder\",\r\n          details: error instanceof Error ? error.message : \"Unknown error\",\r\n        });\r\n      }\r\n    }\r\n\r\n    // Schedule reminder for 1 day before\r\n    setTimeout(async () => {\r\n      const message = `⏰ Reminder: Farm task \"${title}\" is due tomorrow (${dueDate}). Description: ${description}. Please prepare accordingly.`;\r\n\r\n      try {\r\n        const whatsappResponse = await sendWhatsAppReminder(\r\n          \"+919985442209\",\r\n          message,\r\n        );\r\n        console.log(`WhatsApp reminder URL generated for task: ${title}`);\r\n        console.log(`WhatsApp URL: ${whatsappResponse.whatsappUrl}`);\r\n      } catch (error) {\r\n        console.error(\r\n          `Failed to generate WhatsApp reminder for task ${title}:`,\r\n          error,\r\n        );\r\n      }\r\n    }, timeUntilReminder);\r\n\r\n    res.json({\r\n      success: true,\r\n      message: \"Reminder scheduled successfully\",\r\n      taskId,\r\n      scheduledFor: reminderDate.toISOString(),\r\n      timeUntilReminder:\r\n        Math.round(timeUntilReminder / (1000 * 60 * 60)) + \" hours\",\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error scheduling reminder:\", error);\r\n    res.status(500).json({\r\n      success: false,\r\n      error: \"Failed to schedule reminder\",\r\n    });\r\n  }\r\n};\r\n","import { RequestHandler } from \"express\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\n\r\ninterface Task {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  category: string;\r\n  taskType: string;\r\n  priority: \"low\" | \"medium\" | \"high\";\r\n  status: \"pending\" | \"in-progress\" | \"completed\";\r\n  dueDate: string;\r\n  assignedTo: string;\r\n  notes: string;\r\n  createdAt: string;\r\n  completedAt?: string;\r\n  reminderSent?: boolean;\r\n}\r\n\r\nconst TASKS_FILE = path.join(__dirname, \"../data/TaskTracker.json\");\r\n\r\n// Ensure data directory exists\r\nconst dataDir = path.dirname(TASKS_FILE);\r\nif (!fs.existsSync(dataDir)) {\r\n  fs.mkdirSync(dataDir, { recursive: true });\r\n}\r\n\r\n// Helper function to read tasks from JSON file\r\nconst readTasks = (): Task[] => {\r\n  try {\r\n    if (!fs.existsSync(TASKS_FILE)) {\r\n      return [];\r\n    }\r\n    const data = fs.readFileSync(TASKS_FILE, \"utf8\");\r\n    return JSON.parse(data);\r\n  } catch (error) {\r\n    console.error(\"Error reading tasks:\", error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Helper function to write tasks to JSON file\r\nconst writeTasks = (tasks: Task[]): void => {\r\n  try {\r\n    fs.writeFileSync(TASKS_FILE, JSON.stringify(tasks, null, 2));\r\n  } catch (error) {\r\n    console.error(\"Error writing tasks:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// GET /api/tasks - Get all tasks\r\nexport const getTasks: RequestHandler = (req, res) => {\r\n  try {\r\n    const tasks = readTasks();\r\n    res.json(tasks);\r\n  } catch (error) {\r\n    console.error(\"Error getting tasks:\", error);\r\n    res.status(500).json({ error: \"Failed to fetch tasks\" });\r\n  }\r\n};\r\n\r\n// POST /api/tasks - Add new task\r\nexport const addTask: RequestHandler = (req, res) => {\r\n  try {\r\n    const newTask: Task = req.body;\r\n\r\n    // Validate required fields\r\n    if (!newTask.title || !newTask.dueDate || !newTask.assignedTo) {\r\n      return res.status(400).json({ error: \"Missing required fields\" });\r\n    }\r\n\r\n    // Generate ID if not provided\r\n    if (!newTask.id) {\r\n      newTask.id = Date.now().toString();\r\n    }\r\n\r\n    // Set default values\r\n    newTask.status = newTask.status || \"pending\";\r\n    newTask.createdAt =\r\n      newTask.createdAt || new Date().toISOString().split(\"T\")[0];\r\n    newTask.reminderSent = false;\r\n\r\n    const tasks = readTasks();\r\n    tasks.unshift(newTask); // Add to beginning of array\r\n    writeTasks(tasks);\r\n\r\n    res.status(201).json(newTask);\r\n  } catch (error) {\r\n    console.error(\"Error adding task:\", error);\r\n    res.status(500).json({ error: \"Failed to add task\" });\r\n  }\r\n};\r\n\r\n// PUT /api/tasks/:id - Update existing task\r\nexport const updateTask: RequestHandler = (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const updatedTask: Task = req.body;\r\n\r\n    const tasks = readTasks();\r\n    const index = tasks.findIndex((task) => task.id === id);\r\n\r\n    if (index === -1) {\r\n      return res.status(404).json({ error: \"Task not found\" });\r\n    }\r\n\r\n    // If status is being changed to completed, set completedAt\r\n    if (\r\n      updatedTask.status === \"completed\" &&\r\n      tasks[index].status !== \"completed\"\r\n    ) {\r\n      updatedTask.completedAt = new Date().toISOString().split(\"T\")[0];\r\n    }\r\n\r\n    tasks[index] = { ...tasks[index], ...updatedTask, id };\r\n    writeTasks(tasks);\r\n\r\n    res.json(tasks[index]);\r\n  } catch (error) {\r\n    console.error(\"Error updating task:\", error);\r\n    res.status(500).json({ error: \"Failed to update task\" });\r\n  }\r\n};\r\n\r\n// DELETE /api/tasks/:id - Delete task\r\nexport const deleteTask: RequestHandler = (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n\r\n    const tasks = readTasks();\r\n    const index = tasks.findIndex((task) => task.id === id);\r\n\r\n    if (index === -1) {\r\n      return res.status(404).json({ error: \"Task not found\" });\r\n    }\r\n\r\n    const deletedTask = tasks.splice(index, 1)[0];\r\n    writeTasks(tasks);\r\n\r\n    res.json({\r\n      message: \"Task deleted successfully\",\r\n      deletedTask: deletedTask,\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error deleting task:\", error);\r\n    res.status(500).json({ error: \"Failed to delete task\" });\r\n  }\r\n};\r\n\r\n// POST /api/tasks/bulk-delete - Delete multiple tasks\r\nexport const bulkDeleteTasks: RequestHandler = (req, res) => {\r\n  try {\r\n    const { ids }: { ids: string[] } = req.body;\r\n\r\n    if (!Array.isArray(ids)) {\r\n      return res.status(400).json({ error: \"Expected array of IDs\" });\r\n    }\r\n\r\n    const tasks = readTasks();\r\n    const filteredTasks = tasks.filter((task) => !ids.includes(task.id));\r\n    writeTasks(filteredTasks);\r\n\r\n    res.json({\r\n      message: \"Tasks deleted successfully\",\r\n      deletedCount: tasks.length - filteredTasks.length,\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error bulk deleting tasks:\", error);\r\n    res.status(500).json({ error: \"Failed to delete tasks\" });\r\n  }\r\n};\r\n\r\n// GET /api/tasks/backup - Create backup of tasks\r\nexport const backupTasks: RequestHandler = (req, res) => {\r\n  try {\r\n    const tasks = readTasks();\r\n    const timestamp = new Date().toISOString().replace(/[:.]/g, \"-\");\r\n    const backupFileName = `tasks-backup-${timestamp}.json`;\r\n\r\n    res.setHeader(\"Content-Type\", \"application/json\");\r\n    res.setHeader(\r\n      \"Content-Disposition\",\r\n      `attachment; filename=\"${backupFileName}\"`,\r\n    );\r\n    res.json(tasks);\r\n  } catch (error) {\r\n    console.error(\"Error creating backup:\", error);\r\n    res.status(500).json({ error: \"Failed to create backup\" });\r\n  }\r\n};\r\n\r\n// POST /api/tasks/import - Import multiple tasks\r\nexport const importTasks: RequestHandler = (req, res) => {\r\n  try {\r\n    const importedTasks: Task[] = req.body;\r\n\r\n    if (!Array.isArray(importedTasks)) {\r\n      return res.status(400).json({ error: \"Expected array of tasks\" });\r\n    }\r\n\r\n    const tasks = readTasks();\r\n\r\n    // Add imported tasks to the beginning\r\n    const updatedTasks = [...importedTasks, ...tasks];\r\n    writeTasks(updatedTasks);\r\n\r\n    res.json({\r\n      message: \"Tasks imported successfully\",\r\n      count: importedTasks.length,\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error importing tasks:\", error);\r\n    res.status(500).json({ error: \"Failed to import tasks\" });\r\n  }\r\n};\r\n","import { RequestHandler } from \"express\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\n\r\nconst TASKS_FILE = path.join(__dirname, \"../data/TaskTracker.json\");\r\n\r\n// Helper function to read tasks\r\nconst readTasks = () => {\r\n  try {\r\n    if (!fs.existsSync(TASKS_FILE)) {\r\n      return [];\r\n    }\r\n    const data = fs.readFileSync(TASKS_FILE, \"utf8\");\r\n    return JSON.parse(data);\r\n  } catch (error) {\r\n    console.error(\"Error reading tasks:\", error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Helper function to write tasks\r\nconst writeTasks = (tasks: any[]) => {\r\n  try {\r\n    fs.writeFileSync(TASKS_FILE, JSON.stringify(tasks, null, 2));\r\n  } catch (error) {\r\n    console.error(\"Error writing tasks:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// POST /api/test-reminder-validation - Add test task for validation\r\nexport const createTestReminderTask: RequestHandler = (req, res) => {\r\n  try {\r\n    console.log(\"=== Creating Test Reminder Task ===\");\r\n\r\n    // Calculate tomorrow's date\r\n    const tomorrow = new Date();\r\n    tomorrow.setDate(tomorrow.getDate() + 1);\r\n    const tomorrowDate = tomorrow.toISOString().split(\"T\")[0];\r\n\r\n    const testTask = {\r\n      id: `test-${Date.now()}`,\r\n      title: \"🧪 TEST REMINDER - Goat Health Check\",\r\n      description:\r\n        \"This is a test task to validate WhatsApp reminder functionality. It should trigger a reminder today for tomorrow's due date.\",\r\n      category: \"animal-health\",\r\n      taskType: \"checkup\",\r\n      priority: \"high\",\r\n      status: \"pending\",\r\n      dueDate: tomorrowDate,\r\n      assignedTo: \"Test Farmer\",\r\n      notes:\r\n        \"TEST TASK: This validates that reminders are sent 1 day before due date.\",\r\n      createdAt: new Date().toISOString().split(\"T\")[0],\r\n      reminderSent: false,\r\n    };\r\n\r\n    const tasks = readTasks();\r\n    tasks.unshift(testTask);\r\n    writeTasks(tasks);\r\n\r\n    console.log(`✅ Test task created with due date: ${tomorrowDate}`);\r\n    console.log(`📅 Reminder should be triggered today for tomorrow's task`);\r\n\r\n    res.json({\r\n      success: true,\r\n      message: \"Test reminder task created successfully\",\r\n      testTask: testTask,\r\n      reminderInfo: {\r\n        taskDueDate: tomorrowDate,\r\n        reminderShouldTrigger: \"today\",\r\n        expectedBehavior:\r\n          \"WhatsApp reminder URL should be generated automatically\",\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error creating test reminder task:\", error);\r\n    res.status(500).json({\r\n      success: false,\r\n      error: \"Failed to create test reminder task\",\r\n      details: error instanceof Error ? error.message : \"Unknown error\",\r\n    });\r\n  }\r\n};\r\n\r\n// GET /api/test-reminder-validation - Check for test tasks and reminder status\r\nexport const checkReminderValidation: RequestHandler = (req, res) => {\r\n  try {\r\n    console.log(\"=== Checking Reminder Validation ===\");\r\n\r\n    const tasks = readTasks();\r\n    const testTasks = tasks.filter((task: any) => task.id.startsWith(\"test-\"));\r\n\r\n    const today = new Date().toISOString().split(\"T\")[0];\r\n    const tomorrow = new Date();\r\n    tomorrow.setDate(tomorrow.getDate() + 1);\r\n    const tomorrowDate = tomorrow.toISOString().split(\"T\")[0];\r\n\r\n    const validationResults = testTasks.map((task: any) => {\r\n      const daysDifference = Math.ceil(\r\n        (new Date(task.dueDate).getTime() - new Date(today).getTime()) /\r\n          (1000 * 60 * 60 * 24),\r\n      );\r\n\r\n      return {\r\n        taskId: task.id,\r\n        title: task.title,\r\n        dueDate: task.dueDate,\r\n        daysDifference: daysDifference,\r\n        shouldTriggerReminder: daysDifference === 1,\r\n        reminderSent: task.reminderSent || false,\r\n        status: task.status,\r\n      };\r\n    });\r\n\r\n    res.json({\r\n      success: true,\r\n      message: \"Reminder validation check completed\",\r\n      today: today,\r\n      tomorrow: tomorrowDate,\r\n      testTasksFound: testTasks.length,\r\n      validationResults: validationResults,\r\n      summary: {\r\n        tasksNeedingReminders: validationResults.filter(\r\n          (r) => r.shouldTriggerReminder && !r.reminderSent,\r\n        ).length,\r\n        remindersSent: validationResults.filter((r) => r.reminderSent).length,\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error checking reminder validation:\", error);\r\n    res.status(500).json({\r\n      success: false,\r\n      error: \"Failed to check reminder validation\",\r\n      details: error instanceof Error ? error.message : \"Unknown error\",\r\n    });\r\n  }\r\n};\r\n\r\n// DELETE /api/test-reminder-validation - Clean up test tasks\r\nexport const cleanupTestTasks: RequestHandler = (req, res) => {\r\n  try {\r\n    console.log(\"=== Cleaning Up Test Tasks ===\");\r\n\r\n    const tasks = readTasks();\r\n    const nonTestTasks = tasks.filter(\r\n      (task: any) => !task.id.startsWith(\"test-\"),\r\n    );\r\n    const deletedCount = tasks.length - nonTestTasks.length;\r\n\r\n    writeTasks(nonTestTasks);\r\n\r\n    console.log(`🗑️ Removed ${deletedCount} test tasks`);\r\n\r\n    res.json({\r\n      success: true,\r\n      message: \"Test tasks cleaned up successfully\",\r\n      deletedCount: deletedCount,\r\n      remainingTasks: nonTestTasks.length,\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error cleaning up test tasks:\", error);\r\n    res.status(500).json({\r\n      success: false,\r\n      error: \"Failed to cleanup test tasks\",\r\n      details: error instanceof Error ? error.message : \"Unknown error\",\r\n    });\r\n  }\r\n};\r\n","import { RequestHandler } from \"express\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport {\r\n  AnimalRecord,\r\n  WeightRecord,\r\n  BreedingRecord,\r\n  VaccinationRecord,\r\n  HealthRecord,\r\n  AnimalSummary,\r\n} from \"@shared/animal-types\";\r\n\r\nconst ANIMALS_FILE = path.join(__dirname, \"../data/animals.json\");\r\nconst WEIGHT_RECORDS_FILE = path.join(__dirname, \"../data/weight-records.json\");\r\nconst BREEDING_RECORDS_FILE = path.join(\r\n  __dirname,\r\n  \"../data/breeding-records.json\",\r\n);\r\nconst VACCINATION_RECORDS_FILE = path.join(\r\n  __dirname,\r\n  \"../data/vaccination-records.json\",\r\n);\r\nconst HEALTH_RECORDS_FILE = path.join(__dirname, \"../data/health-records.json\");\r\n\r\n// Ensure data directory exists\r\nconst dataDir = path.dirname(ANIMALS_FILE);\r\nif (!fs.existsSync(dataDir)) {\r\n  fs.mkdirSync(dataDir, { recursive: true });\r\n}\r\n\r\n// Helper functions for file operations\r\nconst readAnimals = (): AnimalRecord[] => {\r\n  try {\r\n    if (!fs.existsSync(ANIMALS_FILE)) return [];\r\n    const data = fs.readFileSync(ANIMALS_FILE, \"utf8\");\r\n    return JSON.parse(data);\r\n  } catch (error) {\r\n    console.error(\"Error reading animals:\", error);\r\n    return [];\r\n  }\r\n};\r\n\r\nconst writeAnimals = (animals: AnimalRecord[]): void => {\r\n  try {\r\n    fs.writeFileSync(ANIMALS_FILE, JSON.stringify(animals, null, 2));\r\n  } catch (error) {\r\n    console.error(\"Error writing animals:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst readWeightRecords = (): WeightRecord[] => {\r\n  try {\r\n    if (!fs.existsSync(WEIGHT_RECORDS_FILE)) return [];\r\n    const data = fs.readFileSync(WEIGHT_RECORDS_FILE, \"utf8\");\r\n    return JSON.parse(data);\r\n  } catch (error) {\r\n    console.error(\"Error reading weight records:\", error);\r\n    return [];\r\n  }\r\n};\r\n\r\nconst writeWeightRecords = (records: WeightRecord[]): void => {\r\n  try {\r\n    fs.writeFileSync(WEIGHT_RECORDS_FILE, JSON.stringify(records, null, 2));\r\n  } catch (error) {\r\n    console.error(\"Error writing weight records:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst readBreedingRecords = (): BreedingRecord[] => {\r\n  try {\r\n    if (!fs.existsSync(BREEDING_RECORDS_FILE)) return [];\r\n    const data = fs.readFileSync(BREEDING_RECORDS_FILE, \"utf8\");\r\n    return JSON.parse(data);\r\n  } catch (error) {\r\n    console.error(\"Error reading breeding records:\", error);\r\n    return [];\r\n  }\r\n};\r\n\r\nconst writeBreedingRecords = (records: BreedingRecord[]): void => {\r\n  try {\r\n    fs.writeFileSync(BREEDING_RECORDS_FILE, JSON.stringify(records, null, 2));\r\n  } catch (error) {\r\n    console.error(\"Error writing breeding records:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst readVaccinationRecords = (): VaccinationRecord[] => {\r\n  try {\r\n    if (!fs.existsSync(VACCINATION_RECORDS_FILE)) return [];\r\n    const data = fs.readFileSync(VACCINATION_RECORDS_FILE, \"utf8\");\r\n    return JSON.parse(data);\r\n  } catch (error) {\r\n    console.error(\"Error reading vaccination records:\", error);\r\n    return [];\r\n  }\r\n};\r\n\r\nconst writeVaccinationRecords = (records: VaccinationRecord[]): void => {\r\n  try {\r\n    fs.writeFileSync(\r\n      VACCINATION_RECORDS_FILE,\r\n      JSON.stringify(records, null, 2),\r\n    );\r\n  } catch (error) {\r\n    console.error(\"Error writing vaccination records:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst readHealthRecords = (): HealthRecord[] => {\r\n  try {\r\n    if (!fs.existsSync(HEALTH_RECORDS_FILE)) return [];\r\n    const data = fs.readFileSync(HEALTH_RECORDS_FILE, \"utf8\");\r\n    return JSON.parse(data);\r\n  } catch (error) {\r\n    console.error(\"Error reading health records:\", error);\r\n    return [];\r\n  }\r\n};\r\n\r\nconst writeHealthRecords = (records: HealthRecord[]): void => {\r\n  try {\r\n    fs.writeFileSync(HEALTH_RECORDS_FILE, JSON.stringify(records, null, 2));\r\n  } catch (error) {\r\n    console.error(\"Error writing health records:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Animal CRUD operations\r\nexport const getAnimals: RequestHandler = (req, res) => {\r\n  try {\r\n    const animals = readAnimals();\r\n    res.json(animals);\r\n  } catch (error) {\r\n    console.error(\"Error getting animals:\", error);\r\n    res.status(500).json({ error: \"Failed to fetch animals\" });\r\n  }\r\n};\r\n\r\nexport const addAnimal: RequestHandler = (req, res) => {\r\n  try {\r\n    const newAnimal: AnimalRecord = req.body;\r\n\r\n    // Generate ID if not provided\r\n    if (!newAnimal.id) {\r\n      const animals = readAnimals();\r\n      let maxId = 0;\r\n      animals.forEach((animal) => {\r\n        const numId = parseInt(animal.id);\r\n        if (!isNaN(numId) && numId > maxId) {\r\n          maxId = numId;\r\n        }\r\n      });\r\n      newAnimal.id = (maxId + 1).toString();\r\n    }\r\n\r\n    // Set timestamps\r\n    const now = new Date().toISOString();\r\n    newAnimal.createdAt = now;\r\n    newAnimal.updatedAt = now;\r\n\r\n    const animals = readAnimals();\r\n    animals.unshift(newAnimal);\r\n    writeAnimals(animals);\r\n\r\n    res.status(201).json(newAnimal);\r\n  } catch (error) {\r\n    console.error(\"Error adding animal:\", error);\r\n    res.status(500).json({ error: \"Failed to add animal\" });\r\n  }\r\n};\r\n\r\nexport const updateAnimal: RequestHandler = (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const updatedAnimal: AnimalRecord = req.body;\r\n\r\n    const animals = readAnimals();\r\n    const index = animals.findIndex((animal) => animal.id === id);\r\n\r\n    if (index === -1) {\r\n      return res.status(404).json({ error: \"Animal not found\" });\r\n    }\r\n\r\n    // Preserve created date and update modified date\r\n    updatedAnimal.createdAt = animals[index].createdAt;\r\n    updatedAnimal.updatedAt = new Date().toISOString();\r\n    updatedAnimal.id = id;\r\n\r\n    animals[index] = updatedAnimal;\r\n    writeAnimals(animals);\r\n\r\n    res.json(animals[index]);\r\n  } catch (error) {\r\n    console.error(\"Error updating animal:\", error);\r\n    res.status(500).json({ error: \"Failed to update animal\" });\r\n  }\r\n};\r\n\r\nexport const deleteAnimal: RequestHandler = (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n\r\n    const animals = readAnimals();\r\n    const index = animals.findIndex((animal) => animal.id === id);\r\n\r\n    if (index === -1) {\r\n      return res.status(404).json({ error: \"Animal not found\" });\r\n    }\r\n\r\n    animals.splice(index, 1);\r\n    writeAnimals(animals);\r\n\r\n    res.json({ message: \"Animal deleted successfully\" });\r\n  } catch (error) {\r\n    console.error(\"Error deleting animal:\", error);\r\n    res.status(500).json({ error: \"Failed to delete animal\" });\r\n  }\r\n};\r\n\r\n// Weight record operations\r\nexport const getWeightRecords: RequestHandler = (req, res) => {\r\n  try {\r\n    const { animalId } = req.query;\r\n    let records = readWeightRecords();\r\n\r\n    if (animalId) {\r\n      records = records.filter((record) => record.animalId === animalId);\r\n    }\r\n\r\n    res.json(records);\r\n  } catch (error) {\r\n    console.error(\"Error getting weight records:\", error);\r\n    res.status(500).json({ error: \"Failed to fetch weight records\" });\r\n  }\r\n};\r\n\r\nexport const addWeightRecord: RequestHandler = (req, res) => {\r\n  try {\r\n    const newRecord: WeightRecord = req.body;\r\n    newRecord.id = Date.now().toString();\r\n    newRecord.createdAt = new Date().toISOString();\r\n\r\n    const records = readWeightRecords();\r\n    records.unshift(newRecord);\r\n    writeWeightRecords(records);\r\n\r\n    res.status(201).json(newRecord);\r\n  } catch (error) {\r\n    console.error(\"Error adding weight record:\", error);\r\n    res.status(500).json({ error: \"Failed to add weight record\" });\r\n  }\r\n};\r\n\r\n// Breeding record operations\r\nexport const getBreedingRecords: RequestHandler = (req, res) => {\r\n  try {\r\n    const { animalId } = req.query;\r\n    let records = readBreedingRecords();\r\n\r\n    if (animalId) {\r\n      records = records.filter(\r\n        (record) =>\r\n          record.motherId === animalId || record.fatherId === animalId,\r\n      );\r\n    }\r\n\r\n    res.json(records);\r\n  } catch (error) {\r\n    console.error(\"Error getting breeding records:\", error);\r\n    res.status(500).json({ error: \"Failed to fetch breeding records\" });\r\n  }\r\n};\r\n\r\nexport const addBreedingRecord: RequestHandler = (req, res) => {\r\n  try {\r\n    const newRecord: BreedingRecord = req.body;\r\n    newRecord.id = Date.now().toString();\r\n    const now = new Date().toISOString();\r\n    newRecord.createdAt = now;\r\n    newRecord.updatedAt = now;\r\n\r\n    const records = readBreedingRecords();\r\n    records.unshift(newRecord);\r\n    writeBreedingRecords(records);\r\n\r\n    res.status(201).json(newRecord);\r\n  } catch (error) {\r\n    console.error(\"Error adding breeding record:\", error);\r\n    res.status(500).json({ error: \"Failed to add breeding record\" });\r\n  }\r\n};\r\n\r\n// Vaccination record operations\r\nexport const getVaccinationRecords: RequestHandler = (req, res) => {\r\n  try {\r\n    const { animalId } = req.query;\r\n    let records = readVaccinationRecords();\r\n\r\n    if (animalId) {\r\n      records = records.filter((record) => record.animalId === animalId);\r\n    }\r\n\r\n    res.json(records);\r\n  } catch (error) {\r\n    console.error(\"Error getting vaccination records:\", error);\r\n    res.status(500).json({ error: \"Failed to fetch vaccination records\" });\r\n  }\r\n};\r\n\r\nexport const addVaccinationRecord: RequestHandler = (req, res) => {\r\n  try {\r\n    const newRecord: VaccinationRecord = req.body;\r\n    newRecord.id = Date.now().toString();\r\n    newRecord.createdAt = new Date().toISOString();\r\n\r\n    const records = readVaccinationRecords();\r\n    records.unshift(newRecord);\r\n    writeVaccinationRecords(records);\r\n\r\n    res.status(201).json(newRecord);\r\n  } catch (error) {\r\n    console.error(\"Error adding vaccination record:\", error);\r\n    res.status(500).json({ error: \"Failed to add vaccination record\" });\r\n  }\r\n};\r\n\r\n// Health record operations\r\nexport const getHealthRecords: RequestHandler = (req, res) => {\r\n  try {\r\n    const { animalId } = req.query;\r\n    let records = readHealthRecords();\r\n\r\n    if (animalId) {\r\n      records = records.filter((record) => record.animalId === animalId);\r\n    }\r\n\r\n    res.json(records);\r\n  } catch (error) {\r\n    console.error(\"Error getting health records:\", error);\r\n    res.status(500).json({ error: \"Failed to fetch health records\" });\r\n  }\r\n};\r\n\r\nexport const addHealthRecord: RequestHandler = (req, res) => {\r\n  try {\r\n    const newRecord: HealthRecord = req.body;\r\n    newRecord.id = Date.now().toString();\r\n    newRecord.createdAt = new Date().toISOString();\r\n\r\n    const records = readHealthRecords();\r\n    records.unshift(newRecord);\r\n    writeHealthRecords(records);\r\n\r\n    res.status(201).json(newRecord);\r\n  } catch (error) {\r\n    console.error(\"Error adding health record:\", error);\r\n    res.status(500).json({ error: \"Failed to add health record\" });\r\n  }\r\n};\r\n\r\n// Dashboard summary\r\nexport const getAnimalSummary: RequestHandler = (req, res) => {\r\n  try {\r\n    const animals = readAnimals();\r\n    const weightRecords = readWeightRecords();\r\n\r\n    const summary: AnimalSummary = {\r\n      totalAnimals: animals.length,\r\n      totalGoats: animals.filter((a) => a.type === \"goat\").length,\r\n      totalSheep: animals.filter((a) => a.type === \"sheep\").length,\r\n      totalMales: animals.filter((a) => a.gender === \"male\").length,\r\n      totalFemales: animals.filter((a) => a.gender === \"female\").length,\r\n      activeAnimals: animals.filter((a) => a.status === \"active\").length,\r\n      soldAnimals: animals.filter((a) => a.status === \"sold\").length,\r\n      readyToSell: animals.filter((a) => a.status === \"ready_to_sell\").length,\r\n      deadAnimals: animals.filter((a) => a.status === \"dead\").length,\r\n      averageWeight: 0,\r\n      totalInvestment: 0,\r\n      totalRevenue: 0,\r\n      profitLoss: 0,\r\n    };\r\n\r\n    // Calculate average weight from most recent weight records\r\n    const animalWeights = animals\r\n      .map((animal) => {\r\n        const animalWeightRecords = weightRecords\r\n          .filter((w) => w.animalId === animal.id)\r\n          .sort(\r\n            (a, b) => new Date(b.date).getTime() - new Date(a.date).getTime(),\r\n          );\r\n\r\n        return animalWeightRecords.length > 0\r\n          ? animalWeightRecords[0].weight\r\n          : animal.currentWeight || 0;\r\n      })\r\n      .filter((weight) => weight > 0);\r\n\r\n    if (animalWeights.length > 0) {\r\n      summary.averageWeight =\r\n        animalWeights.reduce((sum, weight) => sum + weight, 0) /\r\n        animalWeights.length;\r\n    }\r\n\r\n    // Calculate financial summary\r\n    summary.totalInvestment = animals.reduce(\r\n      (sum, animal) => sum + (animal.purchasePrice || 0),\r\n      0,\r\n    );\r\n    summary.totalRevenue = animals\r\n      .filter((a) => a.status === \"sold\")\r\n      .reduce((sum, animal) => sum + (animal.salePrice || 0), 0);\r\n    summary.profitLoss = summary.totalRevenue - summary.totalInvestment;\r\n\r\n    res.json(summary);\r\n  } catch (error) {\r\n    console.error(\"Error getting animal summary:\", error);\r\n    res.status(500).json({ error: \"Failed to fetch animal summary\" });\r\n  }\r\n};\r\n\r\n// Backup and import operations\r\nexport const backupAnimals: RequestHandler = (req, res) => {\r\n  try {\r\n    const animals = readAnimals();\r\n    const weightRecords = readWeightRecords();\r\n    const breedingRecords = readBreedingRecords();\r\n    const vaccinationRecords = readVaccinationRecords();\r\n    const healthRecords = readHealthRecords();\r\n\r\n    const backup = {\r\n      animals,\r\n      weightRecords,\r\n      breedingRecords,\r\n      vaccinationRecords,\r\n      healthRecords,\r\n      exportDate: new Date().toISOString(),\r\n    };\r\n\r\n    const timestamp = new Date().toISOString().replace(/[:.]/g, \"-\");\r\n    const backupFileName = `animals-backup-${timestamp}.json`;\r\n\r\n    res.setHeader(\"Content-Type\", \"application/json\");\r\n    res.setHeader(\r\n      \"Content-Disposition\",\r\n      `attachment; filename=\"${backupFileName}\"`,\r\n    );\r\n    res.json(backup);\r\n  } catch (error) {\r\n    console.error(\"Error creating backup:\", error);\r\n    res.status(500).json({ error: \"Failed to create backup\" });\r\n  }\r\n};\r\n","import \"dotenv/config\";\r\nimport express from \"express\";\r\nimport cors from \"cors\";\r\nimport { handleDemo } from \"./routes/demo\";\r\nimport {\r\n  getExpenses,\r\n  addExpense,\r\n  updateExpense,\r\n  deleteExpense,\r\n  importExpenses,\r\n  bulkDeleteExpenses,\r\n  backupExpenses,\r\n  getCategories,\r\n  saveCategories,\r\n  populateCategories,\r\n} from \"./routes/expenses\";\r\nimport {\r\n  sendWhatsAppReminderEndpoint,\r\n  scheduleReminder,\r\n  sendTestWhatsApp,\r\n  sendTestWhatsAppSimple,\r\n} from \"./routes/sms-reminders\";\r\nimport {\r\n  getTasks,\r\n  addTask,\r\n  updateTask,\r\n  deleteTask,\r\n  bulkDeleteTasks,\r\n  backupTasks,\r\n  importTasks,\r\n} from \"./routes/tasks\";\r\nimport {\r\n  createTestReminderTask,\r\n  checkReminderValidation,\r\n  cleanupTestTasks,\r\n} from \"./routes/test-reminder\";\r\nimport {\r\n  getAnimals,\r\n  addAnimal,\r\n  updateAnimal,\r\n  deleteAnimal,\r\n  getWeightRecords,\r\n  addWeightRecord,\r\n  getBreedingRecords,\r\n  addBreedingRecord,\r\n  getVaccinationRecords,\r\n  addVaccinationRecord,\r\n  getHealthRecords,\r\n  addHealthRecord,\r\n  getAnimalSummary,\r\n  backupAnimals,\r\n} from \"./routes/animals\";\r\n\r\nexport function createServer() {\r\n  const app = express();\r\n\r\n  // Middleware\r\n  app.use(cors());\r\n  app.use(express.json());\r\n  app.use(express.urlencoded({ extended: true }));\r\n\r\n  // Example API routes\r\n  app.get(\"/api/ping\", (_req, res) => {\r\n    const ping = process.env.PING_MESSAGE ?? \"ping\";\r\n    res.json({ message: ping });\r\n  });\r\n\r\n  app.get(\"/api/demo\", handleDemo);\r\n\r\n  // Expense routes\r\n  app.get(\"/api/expenses\", getExpenses);\r\n  app.post(\"/api/expenses\", addExpense);\r\n  app.put(\"/api/expenses/:id\", updateExpense);\r\n  app.delete(\"/api/expenses/:id\", deleteExpense);\r\n  app.post(\"/api/expenses/import\", importExpenses);\r\n  app.post(\"/api/expenses/bulk-delete\", bulkDeleteExpenses);\r\n  app.get(\"/api/expenses/backup\", backupExpenses);\r\n  app.get(\"/api/expenses/categories\", getCategories);\r\n  app.post(\"/api/expenses/categories\", saveCategories);\r\n  app.post(\"/api/expenses/populate-categories\", populateCategories);\r\n\r\n  // WhatsApp reminder routes\r\n  app.post(\"/api/send-whatsapp-reminder\", sendWhatsAppReminderEndpoint);\r\n  app.post(\"/api/schedule-reminder\", scheduleReminder);\r\n  app.post(\"/api/test-whatsapp\", sendTestWhatsApp);\r\n  app.post(\"/api/test-whatsapp-simple\", sendTestWhatsAppSimple);\r\n\r\n  // Task management routes\r\n  app.get(\"/api/tasks\", getTasks);\r\n  app.post(\"/api/tasks\", addTask);\r\n  app.put(\"/api/tasks/:id\", updateTask);\r\n  app.delete(\"/api/tasks/:id\", deleteTask);\r\n  app.post(\"/api/tasks/bulk-delete\", bulkDeleteTasks);\r\n  app.get(\"/api/tasks/backup\", backupTasks);\r\n  app.post(\"/api/tasks/import\", importTasks);\r\n\r\n  // Test reminder validation routes\r\n  app.post(\"/api/test-reminder-validation\", createTestReminderTask);\r\n  app.get(\"/api/test-reminder-validation\", checkReminderValidation);\r\n  app.delete(\"/api/test-reminder-validation\", cleanupTestTasks);\r\n\r\n  // Animal management routes\r\n  app.get(\"/api/animals\", getAnimals);\r\n  app.post(\"/api/animals\", addAnimal);\r\n  app.put(\"/api/animals/:id\", updateAnimal);\r\n  app.delete(\"/api/animals/:id\", deleteAnimal);\r\n  app.get(\"/api/animals/summary\", getAnimalSummary);\r\n  app.get(\"/api/animals/backup\", backupAnimals);\r\n\r\n  // Animal record routes\r\n  app.get(\"/api/weight-records\", getWeightRecords);\r\n  app.post(\"/api/weight-records\", addWeightRecord);\r\n  app.get(\"/api/breeding-records\", getBreedingRecords);\r\n  app.post(\"/api/breeding-records\", addBreedingRecord);\r\n  app.get(\"/api/vaccination-records\", getVaccinationRecords);\r\n  app.post(\"/api/vaccination-records\", addVaccinationRecord);\r\n  app.get(\"/api/health-records\", getHealthRecords);\r\n  app.post(\"/api/health-records\", addHealthRecord);\r\n\r\n  return app;\r\n}\r\n","import path from \"path\";\r\nimport { createServer } from \"./index\";\r\nimport * as express from \"express\";\r\n\r\nconst app = createServer();\r\nconst port = process.env.PORT || 3000;\r\n\r\n// In production, serve the built SPA files\r\nconst __dirname = import.meta.dirname;\r\nconst distPath = path.join(__dirname, \"../spa\");\r\n\r\n// Serve static files\r\napp.use(express.static(distPath));\r\n\r\n// Handle React Router - serve index.html for all non-API routes\r\napp.get(\"*\", (req, res) => {\r\n  // Don't serve index.html for API routes\r\n  if (req.path.startsWith(\"/api/\") || req.path.startsWith(\"/health\")) {\r\n    return res.status(404).json({ error: \"API endpoint not found\" });\r\n  }\r\n\r\n  res.sendFile(path.join(distPath, \"index.html\"));\r\n});\r\n\r\napp.listen(port, () => {\r\n  console.log(`🚀 Fusion Starter server running on port ${port}`);\r\n  console.log(`📱 Frontend: http://localhost:${port}`);\r\n  console.log(`🔧 API: http://localhost:${port}/api`);\r\n});\r\n\r\n// Graceful shutdown\r\nprocess.on(\"SIGTERM\", () => {\r\n  console.log(\"🛑 Received SIGTERM, shutting down gracefully\");\r\n  process.exit(0);\r\n});\r\n\r\nprocess.on(\"SIGINT\", () => {\r\n  console.log(\"🛑 Received SIGINT, shutting down gracefully\");\r\n  process.exit(0);\r\n});\r\n"],"names":["dataDir","TASKS_FILE","readTasks","writeTasks","animals","app","express","__dirname"],"mappings":"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"}